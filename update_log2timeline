#!/bin/bash
############################################################################################
# 		update log2timeline
############################################################################################
# This is a small bash script designed to update the log2timeline tool.  It quite simply
# uses wget to fetch the latest version of log2timeline and extracts, compiles and installs
# the tool.
#
# Author: Kristinn Gudjonsson
# Date : 21/05/11
#
# Copyright 2009-2011 Kristinn Gudjonsson (kristinn ( a t ) log2timeline (d o t) net)
#
#  This file is part of log2timeline.
#
#    log2timeline is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    log2timeline is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with log2timeline.  If not, see <http://www.gnu.org/licenses/>.


# define few variables
nightly=0
perl_exe=`which perl`

# start by verifying that we got root privileges
user_check=`id -u`

# check the rights
if [ "$user_check" != "0" ]
then
	echo "This script needs to be run by the root account (with superuser rights)"
	exit 2
fi

# define a help message
function printmsg ( ) 
{
	echo "
	update_log2timeline

This is an update script for the timeline analysis framework log2timeline
	"
	echo "Usage: `basename $0` [-b] [-h] [-perl LIB]"
	echo "Where 
	-b means that the tool should fetch the beta or nightly build instead of the
	latest published version of the tool

	-h means to print out this help message

	-perl LIB
		The tool uses the standar Perl executable found by the command which.
		If you want the log2timeline tool to be built against a different
		Perl executable you can provide a full path to the executable to be
		used (eg. update_log2timeline -perl /opt/local/bin/perl)
	"
}

# now check user inputs
while test $# -gt 0 ; do
        case "$1" in
        -b | -beta | -n | -nightly)
		nightly=1
        ;;
	-h | -help)
		printmsg	
		exit 0
	;;
	-perl)
		# we are currently using a different perl library (not the standard one that is given in path)
		perl_exe=$2
		shift
	;;
	*)
		echo "Wrong usage"
		printmsg
		exit 2
		break
	;;
	esac
	shift
done


# check for tool existance
MD5=`which md5sum`
WGET=`which wget`

if [ "$WGET" == "" ]
then
	echo "Wget is not available on this machine, this update tool depends upon it, so it will no gracefully die"
	exit 12
fi

# chech which version we are about to download
if [ $nightly -eq 0 ]
then
	# fetch the current version
	NAME=log2timeline_latest.tgz
else
	NAME=log2timeline_nightly.tgz
fi

# go and get the tool
cd /tmp

# delete an older version if it exists
rm -f $NAME
rm -f ${NAME}.md5
# delete the installation folder if it exists
rm -rf log2timeline

# and fetch the tool
$WGET --quiet --user-agent="Log2timeline automatic updater (tool)"  http://log2timeline.net/files/$NAME

# and to get the md5 sum
$WGET --quiet --user-agent="Log2timeline automatic updater (md5)" http://log2timeline.net/files/${NAME}.md5

# and to verify the downloaded file
if [ "$MD5" == "" ]
then
	echo "MD5sum is not available on your machine, so the download cannot be verified"
else
	echo "Verifying downloaded file"
	$MD5 -c ${NAME}.md5 2> /dev/null

	if [ $? -eq 0 ]
	then
		echo "Downloaded file has been verified"
	else
		echo "There is a mismatch between the downloaded file's md5sum and the one supplied on the web"
		exit 23
	fi

fi

# and now to extract the tool
tar xfz $NAME

# and to install 
cd log2timeline

# remove the older version
if [ -f "extra/remove_older_version_hack.pl" ]
then
	$pel_exe extra/remove_older_version_hack.pl
fi

$perl_exe Makefile.PL && make && make install

# delete the temporary files
rm -rf log2timeline
rm -f $NAME

# and exit gracefully
exit 0


